;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
axes3d.py, original mplot3d version by John Porter
Created: 23 Sep 2005

Parts fixed by Reinier Heeres <reinier@heeres.eu>
Minor additions by Ben Axelrod <baxelrod@coroware.com>
Significant updates and revisions by Ben Root <ben.v.root@gmail.com>

Module containing Axes3D, an object which can plot 3D objects on a
2D matplotlib figure.
\"\"\"" code nil nil [1 345])
            ("" code nil nil [369 454])
            ("six" include nil nil [456 466])
            ("six.moves" include nil nil [467 513])
            ("math" include nil nil [515 526])
            ("warnings" include nil nil [527 542])
            ("collections" include nil nil [543 578])
            ("numpy" include nil nil [580 598])
            ("matplotlib.axes" include nil nil [600 631])
            ("matplotlib.cbook" include nil nil [632 664])
            ("matplotlib.collections" include nil nil [665 703])
            ("matplotlib.colors" include nil nil [704 739])
            ("matplotlib.docstring" include nil nil [740 780])
            ("matplotlib.scale" include nil nil [781 814])
            ("matplotlib.transforms" include nil nil [815 858])
            ("matplotlib.axes" include nil nil [859 901])
            ("matplotlib.cbook" include nil nil [902 941])
            ("matplotlib.colors" include nil nil [942 994])
            ("matplotlib.transforms" include nil nil [995 1033])
            ("matplotlib.tri.triangulation" include nil nil [1034 1088])
            ("art3d" include nil nil [1097 1109])
            ("proj3d" include nil nil [1117 1130])
            ("axis3d" include nil nil [1138 1151])
            ("unit_bbox" function nil nil [1154 1229])
            ("Axes3D" type
               (:documentation "
    3D axes object.
    "
                :superclasses ("Axes")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [1291 1302])
                    ("_shared_z_axes" variable nil (reparse-symbol indented_block_body) [1307 1339])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [2353 2410])
                            ("self" variable nil (reparse-symbol indented_block_body) [2418 2433])
                            ("self" variable nil (reparse-symbol indented_block_body) [2443 2486])
                            ("self" variable nil (reparse-symbol indented_block_body) [2495 2537])
                            ("zscale" variable nil (reparse-symbol indented_block_body) [2546 2581])
                            ("sharez" variable nil (reparse-symbol indented_block_body) [2590 2625])
                            ("self" code nil (reparse-symbol indented_block_body) [2634 2686])
                            ("self" variable nil (reparse-symbol indented_block_body) [2696 2725])
                            ("self" variable nil (reparse-symbol indented_block_body) [2734 2763])
                            ("self" variable nil (reparse-symbol indented_block_body) [2772 2801])
                            ("self" variable nil (reparse-symbol indented_block_body) [2810 2839])
                            ("self" code nil (reparse-symbol indented_block_body) [2977 3029])
                            ("self" variable nil (reparse-symbol indented_block_body) [3038 3053])
                            ("self" variable nil (reparse-symbol indented_block_body) [3063 3084])
                            ("if" code nil (reparse-symbol indented_block_body) [3093 3208])
                            ("super" code nil (reparse-symbol indented_block_body) [3217 3361])
                            ("super" code nil (reparse-symbol indented_block_body) [3418 3452])
                            ("self" code nil (reparse-symbol indented_block_body) [3510 3528])
                            ("self" variable nil (reparse-symbol indented_block_body) [3537 3550])
                            ("self" variable nil (reparse-symbol indented_block_body) [3625 3646])
                            ("if" code nil (reparse-symbol indented_block_body) [3656 3715])
                            ("if" code nil (reparse-symbol indented_block_body) [3724 3929])
                            ("self" variable nil (reparse-symbol indented_block_body) [3938 3953])
                            ("self" code nil (reparse-symbol indented_block_body) [3962 3979])
                            ("self" code nil (reparse-symbol indented_block_body) [3988 4007])
                            ("self" code nil (reparse-symbol indented_block_body) [4017 4044])
                            ("pseudo_bbox" variable nil (reparse-symbol indented_block_body) [4106 4175])
                            ("self, self" code nil (reparse-symbol indented_block_body) [4184 4248])
                            ("self" code nil (reparse-symbol indented_block_body) [4258 4284]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1358 1362])
                            ("fig" variable nil (reparse-symbol function_parameters) [1364 1367])
                            ("rect" variable nil (reparse-symbol function_parameters) [1369 1373])
                            ("args" variable nil (reparse-symbol function_parameters) [1380 1385])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1387 1395]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1345 4285])
                    ("set_axis_off" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4307 4311]))                          )
                        (reparse-symbol indented_block_body) [4290 4371])
                    ("set_axis_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4392 4396]))                          )
                        (reparse-symbol indented_block_body) [4376 4455])
                    ("have_units" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4475 4479]))                          
                        :documentation "
        Return *True* if units are set on the *x*, *y*, or *z* axes

        ")
                        (reparse-symbol indented_block_body) [4460 4686])
                    ("convert_zunits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4710 4714])
                            ("z" variable nil (reparse-symbol function_parameters) [4716 4717]))                          
                        :documentation "
        For artists in an axes, if the zaxis has units support,
        convert *z* using zaxis unit type

        .. versionadded :: 1.2.1

        ")
                        (reparse-symbol indented_block_body) [4691 4928])
                    ("_process_unit_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4956 4960])
                            ("xdata" variable nil (reparse-symbol function_parameters) [4962 4967])
                            ("ydata" variable nil (reparse-symbol function_parameters) [4974 4979])
                            ("zdata" variable nil (reparse-symbol function_parameters) [4986 4991])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [5025 5031]))                          
                        :documentation "
        Look for unit *kwargs* and update the axis instances as necessary

        ")
                        (reparse-symbol indented_block_body) [4933 6001])
                    ("set_top_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6023 6027]))                          )
                        (reparse-symbol indented_block_body) [6006 6544])
                    ("_init_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6564 6568]))                          )
                        (reparse-symbol indented_block_body) [6549 7230])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7252 7256]))                          )
                        (reparse-symbol indented_block_body) [7235 7326])
                    ("_get_axis_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7350 7354]))                          )
                        (reparse-symbol indented_block_body) [7331 7426])
                    ("unit_cube" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7445 7449])
                            ("vals" variable nil (reparse-symbol function_parameters) [7451 7455]))                          )
                        (reparse-symbol indented_block_body) [7431 7787])
                    ("tunit_cube" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7807 7811])
                            ("vals" variable nil (reparse-symbol function_parameters) [7813 7817])
                            ("M" variable nil (reparse-symbol function_parameters) [7824 7825]))                          )
                        (reparse-symbol indented_block_body) [7792 7979])
                    ("tunit_edges" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8000 8004])
                            ("vals" variable nil (reparse-symbol function_parameters) [8006 8010])
                            ("M" variable nil (reparse-symbol function_parameters) [8017 8018]))                          )
                        (reparse-symbol indented_block_body) [7984 8483])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8497 8501])
                            ("renderer" variable nil (reparse-symbol function_parameters) [8503 8511]))                          )
                        (reparse-symbol indented_block_body) [8488 10173])
                    ("get_axis_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10200 10204]))                          )
                        (reparse-symbol indented_block_body) [10178 10426])
                    ("_on_units_changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10453 10457])
                            ("scalex" variable nil (reparse-symbol function_parameters) [10459 10465])
                            ("scaley" variable nil (reparse-symbol function_parameters) [10473 10479])
                            ("scalez" variable nil (reparse-symbol function_parameters) [10487 10493]))                          
                        :documentation "
        Callback for processing changes to axis units.

        Currently forces updates of data limits and view limits.
        ")
                        (reparse-symbol indented_block_body) [10431 10741])
                    ("update_datalim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10765 10769])
                            ("xys" variable nil (reparse-symbol function_parameters) [10771 10774])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [10776 10784]))                          )
                        (reparse-symbol indented_block_body) [10746 10800])
                    ("get_autoscale_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10826 10830]))                          
                        :documentation "
        Get whether autoscaling is applied for all axes on plot commands

        .. versionadded :: 1.1.0
            This function was added, but not tested. Please report any bugs.
        ")
                        (reparse-symbol indented_block_body) [10805 11124])
                    ("get_autoscalez_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11151 11155]))                          
                        :documentation "
        Get whether autoscaling for the z-axis is applied on plot commands

        .. versionadded :: 1.1.0
            This function was added, but not tested. Please report any bugs.
        ")
                        (reparse-symbol indented_block_body) [11129 11402])
                    ("set_autoscale_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11428 11432])
                            ("b" variable nil (reparse-symbol function_parameters) [11434 11435]))                          
                        :documentation "
        Set whether autoscaling is applied on plot commands

        accepts: [ *True* | *False* ]

        .. versionadded :: 1.1.0
            This function was added, but not tested. Please report any bugs.
        ")
                        (reparse-symbol indented_block_body) [11407 11754])
                    ("set_autoscalez_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11781 11785])
                            ("b" variable nil (reparse-symbol function_parameters) [11787 11788]))                          
                        :documentation "
        Set whether autoscaling for the z-axis is applied on plot commands

        accepts: [ *True* | *False* ]

        .. versionadded :: 1.1.0
            This function was added, but not tested. Please report any bugs.
        ")
                        (reparse-symbol indented_block_body) [11759 12071])
                    ("set_zmargin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12092 12096])
                            ("m" variable nil (reparse-symbol function_parameters) [12098 12099]))                          
                        :documentation "
        Set padding of Z data limits prior to autoscaling.

        *m* times the data interval will be added to each
        end of that interval before it is used in autoscaling.

        accepts: float in range 0 to 1

        .. versionadded :: 1.1.0
            This function was added, but not tested. Please report any bugs.
        ")
                        (reparse-symbol indented_block_body) [12076 12601])
                    ("margins" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12618 12622])
                            ("args" variable nil (reparse-symbol function_parameters) [12624 12629])
                            ("kw" variable nil (reparse-symbol function_parameters) [12631 12635]))                          
                        :documentation "
        Convenience method to set or retrieve autoscaling margins.

        signatures::
            margins()

        returns xmargin, ymargin, zmargin

        ::

            margins(margin)

            margins(xmargin, ymargin, zmargin)

            margins(x=xmargin, y=ymargin, z=zmargin)

            margins(..., tight=False)

        All forms above set the xmargin, ymargin and zmargin
        parameters. All keyword parameters are optional.  A single argument
        specifies xmargin, ymargin and zmargin.  The *tight* parameter
        is passed to :meth:`autoscale_view`, which is executed after
        a margin is changed; the default here is *True*, on the
        assumption that when margins are specified, no additional
        padding to match tick marks is usually desired.  Setting
        *tight* to *None* will preserve the previous setting.

        Specifying any margin changes only the autoscaling; for example,
        if *xmargin* is not None, then *xmargin* times the X data
        interval will be added to each end of that interval before
        it is used in autoscaling.

        .. versionadded :: 1.1.0
            This function was added, but not tested. Please report any bugs.
        ")
                        (reparse-symbol indented_block_body) [12606 15084])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15103 15107])
                            ("enable" variable nil (reparse-symbol function_parameters) [15109 15115])
                            ("axis" variable nil (reparse-symbol function_parameters) [15122 15126])
                            ("tight" variable nil (reparse-symbol function_parameters) [15135 15140]))                          
                        :documentation "
        Convenience method for simple axis view autoscaling.
        See :meth:`matplotlib.axes.Axes.autoscale` for full explanation.
        Note that this function behaves the same, but for all
        three axes.  Therfore, 'z' can be passed for *axis*,
        and 'both' applies to all three axes.

        .. versionadded :: 1.1.0
            This function was added, but not tested. Please report any bugs.
        ")
                        (reparse-symbol indented_block_body) [15089 16270])
                    ("auto_scale_xyz" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16294 16298])
                            ("X" variable nil (reparse-symbol function_parameters) [16300 16301])
                            ("Y" variable nil (reparse-symbol function_parameters) [16303 16304])
                            ("Z" variable nil (reparse-symbol function_parameters) [16306 16307])
                            ("had_data" variable nil (reparse-symbol function_parameters) [16314 16322]))                          )
                        (reparse-symbol indented_block_body) [16275 16969])
                    ("autoscale_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16993 16997])
                            ("tight" variable nil (reparse-symbol function_parameters) [16999 17004])
                            ("scalex" variable nil (reparse-symbol function_parameters) [17011 17017])
                            ("scaley" variable nil (reparse-symbol function_parameters) [17024 17030])
                            ("scalez" variable nil (reparse-symbol function_parameters) [17066 17072]))                          
                        :documentation "
        Autoscale the view limits using the data limits.
        See :meth:`matplotlib.axes.Axes.autoscale_view` for documentation.
        Note that this function applies to the 3D axes, and as such
        adds the *scalez* to the function arguments.

        .. versionchanged :: 1.1.0
            Function signature was changed to better match the 2D version.
            *tight* is now explicitly a kwarg and placed first.

        .. versionchanged :: 1.2.1
            This is now fully functional.

        ")
                        (reparse-symbol indented_block_body) [16974 20548])
                    ("get_w_lims" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20568 20572]))                          )
                        (reparse-symbol indented_block_body) [20553 20777])
                    ("_determine_lims" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20802 20806])
                            ("xmin" variable nil (reparse-symbol function_parameters) [20808 20812])
                            ("xmax" variable nil (reparse-symbol function_parameters) [20819 20823])
                            ("args" variable nil (reparse-symbol function_parameters) [20830 20835])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20837 20845]))                          )
                        (reparse-symbol indented_block_body) [20782 21031])
                    ("set_xlim3d" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21051 21055])
                            ("left" variable nil (reparse-symbol function_parameters) [21057 21061])
                            ("right" variable nil (reparse-symbol function_parameters) [21068 21073])
                            ("emit" variable nil (reparse-symbol function_parameters) [21080 21084])
                            ("auto" variable nil (reparse-symbol function_parameters) [21091 21095])
                            ("kw" variable nil (reparse-symbol function_parameters) [21103 21107]))                          
                        :documentation "
        Set 3D x limits.

        See :meth:`matplotlib.axes.Axes.set_xlim` for full documentation.

        ")
                        (reparse-symbol indented_block_body) [21036 22995])
                    ("set_xlim" variable nil (reparse-symbol indented_block_body) [22999 23020])
                    ("set_ylim3d" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23041 23045])
                            ("bottom" variable nil (reparse-symbol function_parameters) [23047 23053])
                            ("top" variable nil (reparse-symbol function_parameters) [23060 23063])
                            ("emit" variable nil (reparse-symbol function_parameters) [23070 23074])
                            ("auto" variable nil (reparse-symbol function_parameters) [23081 23085])
                            ("kw" variable nil (reparse-symbol function_parameters) [23093 23097]))                          
                        :documentation "
        Set 3D y limits.

        See :meth:`matplotlib.axes.Axes.set_ylim` for full documentation.

        ")
                        (reparse-symbol indented_block_body) [23026 24987])
                    ("set_ylim" variable nil (reparse-symbol indented_block_body) [24991 25012])
                    ("set_zlim3d" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25033 25037])
                            ("bottom" variable nil (reparse-symbol function_parameters) [25039 25045])
                            ("top" variable nil (reparse-symbol function_parameters) [25052 25055])
                            ("emit" variable nil (reparse-symbol function_parameters) [25062 25066])
                            ("auto" variable nil (reparse-symbol function_parameters) [25073 25077])
                            ("kw" variable nil (reparse-symbol function_parameters) [25085 25089]))                          
                        :documentation "
        Set 3D z limits.

        See :meth:`matplotlib.axes.Axes.set_ylim` for full documentation

        ")
                        (reparse-symbol indented_block_body) [25018 26978])
                    ("set_zlim" variable nil (reparse-symbol indented_block_body) [26982 27003])
                    ("get_xlim3d" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27024 27028]))                          )
                        (reparse-symbol indented_block_body) [27009 27072])
                    ("get_xlim3d" variable nil (reparse-symbol indented_block_body) [27076 27124])
                    ("get_xlim" variable nil (reparse-symbol indented_block_body) [27129 27150])
                    ("if" code nil (reparse-symbol indented_block_body) [27155 27345])
                    ("get_ylim3d" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27365 27369]))                          )
                        (reparse-symbol indented_block_body) [27350 27413])
                    ("get_ylim3d" variable nil (reparse-symbol indented_block_body) [27417 27465])
                    ("get_ylim" variable nil (reparse-symbol indented_block_body) [27470 27491])
                    ("if" code nil (reparse-symbol indented_block_body) [27496 27687])
                    ("get_zlim3d" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27707 27711]))                          )
                        (reparse-symbol indented_block_body) [27692 27786])
                    ("get_zlim" variable nil (reparse-symbol indented_block_body) [27790 27811])
                    ("get_zscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27832 27836]))                          )
                        (reparse-symbol indented_block_body) [27817 28093])
                    ("set_xscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28215 28219])
                            ("value" variable nil (reparse-symbol function_parameters) [28221 28226])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [28228 28236]))                          )
                        (reparse-symbol indented_block_body) [28200 28376])
                    ("if" code nil (reparse-symbol indented_block_body) [28380 28626])
                    ("set_yscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28646 28650])
                            ("value" variable nil (reparse-symbol function_parameters) [28652 28657])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [28659 28667]))                          )
                        (reparse-symbol indented_block_body) [28631 28833])
                    ("if" code nil (reparse-symbol indented_block_body) [28837 29083])
                    ("set_zscale" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29133 29137])
                            ("value" variable nil (reparse-symbol function_parameters) [29139 29144])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [29146 29154]))                          
                        :documentation "
        Set the scaling of the z-axis: %(scale)s

        ACCEPTS: [%(scale)s]

        Different kwargs are accepted, depending on the scale:
        %(scale_docs)s

        .. note ::
            Currently, Axes3D objects only supports linear scales.
            Other scales may or may not work, and support for these
            is improving with each release.

        .. versionadded :: 1.1.0
            This function was added, but not tested. Please report any bugs.
        ")
                        (reparse-symbol indented_block_body) [29088 29820])
                    ("set_zticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29840 29844])
                            ("args" variable nil (reparse-symbol function_parameters) [29846 29851])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [29853 29861]))                          
                        :documentation "
        Set z-axis tick locations.
        See :meth:`matplotlib.axes.Axes.set_yticks` for more details.

        .. note::
            Minor ticks are not supported.

        .. versionadded:: 1.1.0
        ")
                        (reparse-symbol indented_block_body) [29825 30141])
                    ("get_zticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30161 30165])
                            ("minor" variable nil (reparse-symbol function_parameters) [30167 30172]))                          
                        :documentation "
        Return the z ticks as a list of locations
        See :meth:`matplotlib.axes.Axes.get_yticks` for more details.

        .. note::
            Minor ticks are not supported.

        .. versionadded:: 1.1.0
        ")
                        (reparse-symbol indented_block_body) [30146 30472])
                    ("get_zmajorticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30502 30506]))                          
                        :documentation "
        Get the ztick labels as a list of Text instances

        .. versionadded :: 1.1.0
        ")
                        (reparse-symbol indented_block_body) [30477 30743])
                    ("get_zminorticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30773 30777]))                          
                        :documentation "
        Get the ztick labels as a list of Text instances

        .. note::
            Minor ticks are not supported. This function was added
            only for completeness.

        .. versionadded :: 1.1.0
        ")
                        (reparse-symbol indented_block_body) [30748 31135])
                    ("set_zticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31160 31164])
                            ("args" variable nil (reparse-symbol function_parameters) [31166 31171])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [31173 31181]))                          
                        :documentation "
        Set z-axis tick labels.
        See :meth:`matplotlib.axes.Axes.set_yticklabels` for more details.

        .. note::
            Minor ticks are not supported by Axes3D objects.

        .. versionadded:: 1.1.0
        ")
                        (reparse-symbol indented_block_body) [31140 31486])
                    ("get_zticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31511 31515])
                            ("minor" variable nil (reparse-symbol function_parameters) [31517 31522]))                          
                        :documentation "
        Get ztick labels as a list of Text instances.
        See :meth:`matplotlib.axes.Axes.get_yticklabels` for more details.

        .. note::
            Minor ticks are not supported.

        .. versionadded:: 1.1.0
        ")
                        (reparse-symbol indented_block_body) [31491 31904])
                    ("zaxis_date" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31924 31928])
                            ("tz" variable nil (reparse-symbol function_parameters) [31930 31932]))                          
                        :documentation "
        Sets up z-axis ticks and labels that treat the z data as dates.

        *tz* is a timezone string or :class:`tzinfo` instance.
        Defaults to rc value.

        .. note::
            This function is merely provided for completeness.
            Axes3D objects do not officially support dates for ticks,
            and so this may or may not work as expected.

        .. versionadded :: 1.1.0
            This function was added, but not tested. Please report any bugs.
        ")
                        (reparse-symbol indented_block_body) [31909 32483])
                    ("get_zticklines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32507 32511]))                          
                        :documentation "
        Get ztick lines as a list of Line2D instances.
        Note that this function is provided merely for completeness.
        These lines are re-calculated as the display changes.

        .. versionadded:: 1.1.0
        ")
                        (reparse-symbol indented_block_body) [32488 32799])
                    ("clabel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32815 32819])
                            ("args" variable nil (reparse-symbol function_parameters) [32821 32826])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [32828 32836]))                          
                        :documentation "
        This function is currently not implemented for 3D axes.
        Returns *None*.
        ")
                        (reparse-symbol indented_block_body) [32804 32971])
                    ("view_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32990 32994])
                            ("elev" variable nil (reparse-symbol function_parameters) [32996 33000])
                            ("azim" variable nil (reparse-symbol function_parameters) [33007 33011]))                          
                        :documentation "
        Set the elevation and azimuth of the axes.

        This can be used to rotate the axes programatically.

        'elev' stores the elevation angle in the z plane.
        'azim' stores the azimuth angle in the x,y plane.

        if elev or azim are None (default), then the initial value
        is used which was specified in the :class:`Axes3D` constructor.
        ")
                        (reparse-symbol indented_block_body) [32976 33659])
                    ("set_proj_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33682 33686])
                            ("proj_type" variable nil (reparse-symbol function_parameters) [33688 33697]))                          
                        :documentation "
        Set the projection type.

        Parameters
        ----------
        proj_type : str
            Type of projection, accepts 'persp' and 'ortho'.

        ")
                        (reparse-symbol indented_block_body) [33664 34154])
                    ("get_proj" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34172 34176]))                          
                        :documentation "
        Create the projection matrix from the current viewing position.

        elev stores the elevation angle in the z plane
        azim stores the azimuth angle in the x,y plane

        dist is the distance of the eye viewing point from the object
        point.

        ")
                        (reparse-symbol indented_block_body) [34159 35675])
                    ("mouse_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35695 35699])
                            ("rotate_btn" variable nil (reparse-symbol function_parameters) [35701 35711])
                            ("zoom_btn" variable nil (reparse-symbol function_parameters) [35715 35723]))                          
                        :documentation "Initializes mouse button callbacks to enable 3D rotation of
        the axes.  Also optionally sets the mouse buttons for 3D rotation
        and zooming.

        ============  =======================================================
        Argument      Description
        ============  =======================================================
        *rotate_btn*  The integer or list of integers specifying which mouse
                      button or buttons to use for 3D rotation of the axes.
                      Default = 1.

        *zoom_btn*    The integer or list of integers specifying which mouse
                      button or buttons to use to zoom the 3D axes.
                      Default = 3.
        ============  =======================================================

        ")
                        (reparse-symbol indented_block_body) [35680 37346])
                    ("can_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37364 37368]))                          
                        :documentation "
        Return *True* if this axes supports the zoom box button functionality.

        3D axes objects do not use the zoom box button.
        ")
                        (reparse-symbol indented_block_body) [37351 37552])
                    ("can_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37569 37573]))                          
                        :documentation "
        Return *True* if this axes supports the pan/zoom button functionality.

        3D axes objects do not use the pan/zoom button.
        ")
                        (reparse-symbol indented_block_body) [37557 37757])
                    ("cla" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37770 37774]))                          
                        :documentation "
        Clear axes
        ")
                        (reparse-symbol indented_block_body) [37762 38644])
                    ("disable_mouse_rotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38676 38680]))                          
                        :documentation "Disable mouse button callbacks.
        ")
                        (reparse-symbol indented_block_body) [38649 38893])
                    ("_button_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38916 38920])
                            ("event" variable nil (reparse-symbol function_parameters) [38922 38927]))                          )
                        (reparse-symbol indented_block_body) [38898 39066])
                    ("_button_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39091 39095])
                            ("event" variable nil (reparse-symbol function_parameters) [39097 39102]))                          )
                        (reparse-symbol indented_block_body) [39071 39140])
                    ("format_zdata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39162 39166])
                            ("z" variable nil (reparse-symbol function_parameters) [39168 39169]))                          
                        :documentation "
        Return *z* string formatted.  This function will use the
        :attr:`fmt_zdata` attribute if it is callable, else will fall
        back on the zaxis major formatter
        ")
                        (reparse-symbol indented_block_body) [39145 39574])
                    ("format_coord" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39596 39600])
                            ("xd" variable nil (reparse-symbol function_parameters) [39602 39604])
                            ("yd" variable nil (reparse-symbol function_parameters) [39606 39608]))                          
                        :documentation "
        Given the 2D view coordinates attempt to guess a 3D coordinate.
        Looks for the nearest edge to the point and then assumes that
        the point is at the same z location as the nearest point on the edge.
        ")
                        (reparse-symbol indented_block_body) [39579 40701])
                    ("_on_move" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40719 40723])
                            ("event" variable nil (reparse-symbol function_parameters) [40725 40730]))                          
                        :documentation "Mouse moving

        button-1 rotates by default.  Can be set explicitly in mouse_init().
        button-3 zooms by default.  Can be set explicitly in mouse_init().
        ")
                        (reparse-symbol indented_block_body) [40706 42432])
                    ("set_zlabel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42452 42456])
                            ("zlabel" variable nil (reparse-symbol function_parameters) [42458 42464])
                            ("fontdict" variable nil (reparse-symbol function_parameters) [42466 42474])
                            ("labelpad" variable nil (reparse-symbol function_parameters) [42481 42489])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [42496 42504]))                          )
                        (reparse-symbol indented_block_body) [42437 42735])
                    ("get_zlabel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42755 42759]))                          
                        :documentation "
        Get the z-label text string.

        .. versionadded :: 1.1.0
            This function was added, but not tested. Please report any bugs.
        ")
                        (reparse-symbol indented_block_body) [42740 43005])
                    ("get_frame_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43068 43072]))                          
                        :documentation "
        Get whether the 3D axes panels are drawn

        .. versionadded :: 1.1.0
        ")
                        (reparse-symbol indented_block_body) [43051 43211])
                    ("set_frame_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43233 43237])
                            ("b" variable nil (reparse-symbol function_parameters) [43239 43240]))                          
                        :documentation "
        Set whether the 3D axes panels are drawn

        ACCEPTS: [ *True* | *False* ]

        .. versionadded :: 1.1.0
        ")
                        (reparse-symbol indented_block_body) [43216 43447])
                    ("get_axisbelow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43470 43474]))                          
                        :documentation "
        Get whether axis below is true or not.

        For axes3d objects, this will always be *True*

        .. versionadded :: 1.1.0
            This function was added for completeness.
        ")
                        (reparse-symbol indented_block_body) [43452 43712])
                    ("set_axisbelow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43735 43739])
                            ("b" variable nil (reparse-symbol function_parameters) [43741 43742]))                          
                        :documentation "
        Set whether the axis ticks and gridlines are above or below
        most artists

        For axes3d objects, this will ignore any settings and just use *True*

        ACCEPTS: [ *True* | *False* ]

        .. versionadded :: 1.1.0
            This function was added for completeness.
        ")
                        (reparse-symbol indented_block_body) [43717 44121])
                    ("grid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44135 44139])
                            ("b" variable nil (reparse-symbol function_parameters) [44141 44142])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [44149 44157]))                          )
                        (reparse-symbol indented_block_body) [44126 44698])
                    ("ticklabel_format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44724 44728])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [44730 44738]))                          
                        :documentation "
        Convenience method for manipulating the ScalarFormatter
        used by default for linear axes in Axed3D objects.

        See :meth:`matplotlib.axes.Axes.ticklabel_format` for full
        documentation.  Note that this version applies to all three
        axes of the Axes3D object.  Therefore, the *axis* argument
        will also accept a value of 'z' and the value of 'both' will
        apply to all three axes.

        .. versionadded :: 1.1.0
            This function was added, but not tested. Please report any bugs.
        ")
                        (reparse-symbol indented_block_body) [44703 47453])
                    ("locator_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47477 47481])
                            ("axis" variable nil (reparse-symbol function_parameters) [47483 47487])
                            ("tight" variable nil (reparse-symbol function_parameters) [47496 47501])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [47508 47516]))                          
                        :documentation "
        Convenience method for controlling tick locators.

        See :meth:`matplotlib.axes.Axes.locator_params` for full
        documentation  Note that this is for Axes3D objects,
        therefore, setting *axis* to 'both' will result in the
        parameters being set for all three axes.  Also, *axis*
        can also take a value of 'z' to apply parameters to the
        z axis.

        .. versionadded :: 1.1.0
            This function was added, but not tested. Please report any bugs.
        ")
                        (reparse-symbol indented_block_body) [47458 48461])
                    ("tick_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48482 48486])
                            ("axis" variable nil (reparse-symbol function_parameters) [48488 48492])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [48501 48509]))                          
                        :documentation "
        Convenience method for changing the appearance of ticks and
        tick labels.

        See :meth:`matplotlib.axes.Axes.tick_params` for more complete
        documentation.

        The only difference is that setting *axis* to 'both' will
        mean that the settings are applied to all three axes. Also,
        the *axis* parameter also accepts a value of 'z', which
        would mean to apply to only the z-axis.

        Also, because of how Axes3D objects are drawn very differently
        from regular 2D axes, some of these settings may have
        ambiguous meaning.  For simplicity, the 'z' axis will
        accept settings as if it was like the 'y' axis.

        .. note::
            While this function is currently implemented, the core part
            of the Axes3D object may ignore some of these settings.
            Future releases will fix this. Priority will be given to
            those who file bugs.

        .. versionadded :: 1.1.0
            This function was added, but not tested. Please report any bugs.
        ")
                        (reparse-symbol indented_block_body) [48466 49907])
                    ("invert_zaxis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49986 49990]))                          
                        :documentation "
        Invert the z-axis.

        .. versionadded :: 1.1.0
            This function was added, but not tested. Please report any bugs.
        ")
                        (reparse-symbol indented_block_body) [49969 50239])
                    ("zaxis_inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50263 50267]))                          )
                        (reparse-symbol indented_block_body) [50244 50519])
                    ("get_zbound" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50539 50543]))                          
                        :documentation "
        Returns the z-axis numerical bounds where::

          lowerBound < upperBound

        .. versionadded :: 1.1.0
            This function was added, but not tested. Please report any bugs.
        ")
                        (reparse-symbol indented_block_body) [50524 50907])
                    ("set_zbound" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50927 50931])
                            ("lower" variable nil (reparse-symbol function_parameters) [50933 50938])
                            ("upper" variable nil (reparse-symbol function_parameters) [50945 50950]))                          
                        :documentation "
        Set the lower and upper numerical bounds of the z-axis.
        This method will honor axes inversion regardless of parameter order.
        It will not change the :attr:`_autoscaleZon` attribute.

        .. versionadded :: 1.1.0
            This function was added, but not tested. Please report any bugs.
        ")
                        (reparse-symbol indented_block_body) [50912 51887])
                    ("text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51901 51905])
                            ("x" variable nil (reparse-symbol function_parameters) [51907 51908])
                            ("y" variable nil (reparse-symbol function_parameters) [51910 51911])
                            ("z" variable nil (reparse-symbol function_parameters) [51913 51914])
                            ("s" variable nil (reparse-symbol function_parameters) [51916 51917])
                            ("zdir" variable nil (reparse-symbol function_parameters) [51919 51923])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [51930 51938]))                          )
                        (reparse-symbol indented_block_body) [51892 52259])
                    ("text3D" variable nil (reparse-symbol indented_block_body) [52264 52277])
                    ("text2D" variable nil (reparse-symbol indented_block_body) [52282 52300])
                    ("plot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52315 52319])
                            ("xs" variable nil (reparse-symbol function_parameters) [52321 52323])
                            ("ys" variable nil (reparse-symbol function_parameters) [52325 52327])
                            ("args" variable nil (reparse-symbol function_parameters) [52329 52334])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [52336 52344]))                          )
                        (reparse-symbol indented_block_body) [52306 53813])
                    ("plot3D" variable nil (reparse-symbol indented_block_body) [53818 53831])
                    ("plot_surface" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53854 53858])
                            ("X" variable nil (reparse-symbol function_parameters) [53860 53861])
                            ("Y" variable nil (reparse-symbol function_parameters) [53863 53864])
                            ("Z" variable nil (reparse-symbol function_parameters) [53866 53867])
                            ("args" variable nil (reparse-symbol function_parameters) [53869 53874])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [53876 53884]))                          
                        :documentation "
        Create a surface plot.

        By default it will be colored in shades of a solid color, but it also
        supports color mapping by supplying the *cmap* argument.

        .. note::

           The *rcount* and *ccount* kwargs, which both default to 50,
           determine the maximum number of samples used in each direction.  If
           the input data is larger, it will be downsampled (by slicing) to
           these numbers of points.

        Parameters
        ----------
        X, Y, Z : 2d arrays
            Data values.

        rcount, ccount : int
            Maximum number of samples used in each direction.  If the input
            data is larger, it will be downsampled (by slicing) to these
            numbers of points.  Defaults to 50.

            .. versionadded:: 2.0

        rstride, cstride : int
            Downsampling stride in each direction.  These arguments are
            mutually exclusive with *rcount* and *ccount*.  If only one of
            *rstride* or *cstride* is set, the other defaults to 10.

            'classic' mode uses a default of ``rstride = cstride = 10`` instead
            of the new default of ``rcount = ccount = 50``.

        color : color-like
            Color of the surface patches.

        cmap : Colormap
            Colormap of the surface patches.

        facecolors : array-like of colors.
            Colors of each individual patch.

        norm : Normalize
            Normalization for the colormap.

        vmin, vmax : float
            Bounds for the normalization.

        shade : bool
            Whether to shade the face colors.

        **kwargs :
            Other arguments are forwarded to `~.Poly3DCollection`.
        ")
                        (reparse-symbol indented_block_body) [53837 60630])
                    ("_generate_normals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60657 60661])
                            ("polygons" variable nil (reparse-symbol function_parameters) [60663 60671]))                          )
                        (reparse-symbol indented_block_body) [60635 61126])
                    ("_shade_colors" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61149 61153])
                            ("color" variable nil (reparse-symbol function_parameters) [61155 61160])
                            ("normals" variable nil (reparse-symbol function_parameters) [61162 61169]))                          )
                        (reparse-symbol indented_block_body) [61131 62116])
                    ("_shade_colors_lightsource" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62151 62155])
                            ("data" variable nil (reparse-symbol function_parameters) [62157 62161])
                            ("cmap" variable nil (reparse-symbol function_parameters) [62163 62167])
                            ("lightsource" variable nil (reparse-symbol function_parameters) [62169 62180]))                          )
                        (reparse-symbol indented_block_body) [62121 62320])
                    ("plot_wireframe" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62344 62348])
                            ("X" variable nil (reparse-symbol function_parameters) [62350 62351])
                            ("Y" variable nil (reparse-symbol function_parameters) [62353 62354])
                            ("Z" variable nil (reparse-symbol function_parameters) [62356 62357])
                            ("args" variable nil (reparse-symbol function_parameters) [62359 62364])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [62366 62374]))                          
                        :documentation "
        Plot a 3D wireframe.

        .. note::

           The *rcount* and *ccount* kwargs, which both default to 50,
           determine the maximum number of samples used in each direction.  If
           the input data is larger, it will be downsampled (by slicing) to
           these numbers of points.

        Parameters
        ----------
        X, Y, Z : 2d arrays
            Data values.

        rcount, ccount : int
            Maximum number of samples used in each direction.  If the input
            data is larger, it will be downsampled (by slicing) to these
            numbers of points.  Setting a count to zero causes the data to be
            not sampled in the corresponding direction, producing a 3D line
            plot rather than a wireframe plot.  Defaults to 50.

            .. versionadded:: 2.0

        rstride, cstride : int
            Downsampling stride in each direction.  These arguments are
            mutually exclusive with *rcount* and *ccount*.  If only one of
            *rstride* or *cstride* is set, the other defaults to 1.  Setting a
            stride to zero causes the data to be not sampled in the
            corresponding direction, producing a 3D line plot rather than a
            wireframe plot.

            'classic' mode uses a default of ``rstride = cstride = 1`` instead
            of the new default of ``rcount = ccount = 50``.

        **kwargs :
            Other arguments are forwarded to `~.Line3DCollection`.
        ")
                        (reparse-symbol indented_block_body) [62325 66894])
                    ("plot_trisurf" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66916 66920])
                            ("args" variable nil (reparse-symbol function_parameters) [66922 66927])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [66929 66937]))                          
                        :documentation "
        ============= ================================================
        Argument      Description
        ============= ================================================
        *X*, *Y*, *Z* Data values as 1D arrays
        *color*       Color of the surface patches
        *cmap*        A colormap for the surface patches.
        *norm*        An instance of Normalize to map values to colors
        *vmin*        Minimum value to map
        *vmax*        Maximum value to map
        *shade*       Whether to shade the facecolors
        ============= ================================================

        The (optional) triangulation can be specified in one of two ways;
        either::

          plot_trisurf(triangulation, ...)

        where triangulation is a :class:`~matplotlib.tri.Triangulation`
        object, or::

          plot_trisurf(X, Y, ...)
          plot_trisurf(X, Y, triangles, ...)
          plot_trisurf(X, Y, triangles=triangles, ...)

        in which case a Triangulation object will be created.  See
        :class:`~matplotlib.tri.Triangulation` for a explanation of
        these possibilities.

        The remaining arguments are::

          plot_trisurf(..., Z)

        where *Z* is the array of values to contour, one per point
        in the triangulation.

        Other arguments are passed on to
        :class:`~mpl_toolkits.mplot3d.art3d.Poly3DCollection`

        **Examples:**

        .. plot:: gallery/mplot3d/trisurf3d.py
        .. plot:: gallery/mplot3d/trisurf3d_2.py

        .. versionadded:: 1.2.0
            This plotting function was added for the v1.2.0 release.
        ")
                        (reparse-symbol indented_block_body) [66899 71168])
                    ("_3d_extend_contour" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71196 71200])
                            ("cset" variable nil (reparse-symbol function_parameters) [71202 71206])
                            ("stride" variable nil (reparse-symbol function_parameters) [71208 71214]))                          )
                        (reparse-symbol indented_block_body) [71173 72923])
                    ("add_contour_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72948 72952])
                            ("cset" variable nil (reparse-symbol function_parameters) [72954 72958])
                            ("extend3d" variable nil (reparse-symbol function_parameters) [72960 72968])
                            ("stride" variable nil (reparse-symbol function_parameters) [72976 72982])
                            ("zdir" variable nil (reparse-symbol function_parameters) [72986 72990])
                            ("offset" variable nil (reparse-symbol function_parameters) [72996 73002]))                          )
                        (reparse-symbol indented_block_body) [72928 73323])
                    ("add_contourf_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73349 73353])
                            ("cset" variable nil (reparse-symbol function_parameters) [73355 73359])
                            ("zdir" variable nil (reparse-symbol function_parameters) [73361 73365])
                            ("offset" variable nil (reparse-symbol function_parameters) [73371 73377]))                          )
                        (reparse-symbol indented_block_body) [73328 73633])
                    ("contour" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73650 73654])
                            ("X" variable nil (reparse-symbol function_parameters) [73656 73657])
                            ("Y" variable nil (reparse-symbol function_parameters) [73659 73660])
                            ("Z" variable nil (reparse-symbol function_parameters) [73662 73663])
                            ("args" variable nil (reparse-symbol function_parameters) [73665 73670])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [73672 73680]))                          )
                        (reparse-symbol indented_block_body) [73638 75011])
                    ("contour3D" variable nil (reparse-symbol indented_block_body) [75016 75035])
                    ("tricontour" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75056 75060])
                            ("args" variable nil (reparse-symbol function_parameters) [75062 75067])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [75069 75077]))                          
                        :documentation "
        Create a 3D contour plot.

        ==========  ================================================
        Argument    Description
        ==========  ================================================
        *X*, *Y*,   Data values as numpy.arrays
        *Z*
        *extend3d*  Whether to extend contour in 3D (default: False)
        *stride*    Stride (step size) for extending contour
        *zdir*      The direction to use: x, y or z (default)
        *offset*    If specified plot a projection of the contour
                    lines on this position in plane normal to zdir
        ==========  ================================================

        Other keyword arguments are passed on to
        :func:`~matplotlib.axes.Axes.tricontour`

        Returns a :class:`~matplotlib.axes.Axes.contour`

        .. versionchanged:: 1.3.0
            Added support for custom triangulations

        EXPERIMENTAL:  This method currently produces incorrect output due to a
        longstanding bug in 3D PolyCollection rendering.
        ")
                        (reparse-symbol indented_block_body) [75041 77019])
                    ("contourf" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77037 77041])
                            ("X" variable nil (reparse-symbol function_parameters) [77043 77044])
                            ("Y" variable nil (reparse-symbol function_parameters) [77046 77047])
                            ("Z" variable nil (reparse-symbol function_parameters) [77049 77050])
                            ("args" variable nil (reparse-symbol function_parameters) [77052 77057])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [77059 77067]))                          )
                        (reparse-symbol indented_block_body) [77024 78251])
                    ("contourf3D" variable nil (reparse-symbol indented_block_body) [78256 78277])
                    ("tricontourf" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78299 78303])
                            ("args" variable nil (reparse-symbol function_parameters) [78305 78310])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [78312 78320]))                          
                        :documentation "
        Create a 3D contourf plot.

        ==========  ================================================
        Argument    Description
        ==========  ================================================
        *X*, *Y*,   Data values as numpy.arrays
        *Z*
        *zdir*      The direction to use: x, y or z (default)
        *offset*    If specified plot a projection of the contour
                    lines on this position in plane normal to zdir
        ==========  ================================================

        Other keyword arguments are passed on to
        :func:`~matplotlib.axes.Axes.tricontour`

        Returns a :class:`~matplotlib.axes.Axes.contour`

        .. versionchanged :: 1.3.0
            Added support for custom triangulations

        EXPERIMENTAL:  This method currently produces incorrect output due to a
        longstanding bug in 3D PolyCollection rendering.
        ")
                        (reparse-symbol indented_block_body) [78283 80028])
                    ("add_collection3d" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80054 80058])
                            ("col" variable nil (reparse-symbol function_parameters) [80060 80063])
                            ("zs" variable nil (reparse-symbol function_parameters) [80065 80067])
                            ("zdir" variable nil (reparse-symbol function_parameters) [80071 80075]))                          )
                        (reparse-symbol indented_block_body) [80033 81286])
                    ("scatter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81303 81307])
                            ("xs" variable nil (reparse-symbol function_parameters) [81309 81311])
                            ("ys" variable nil (reparse-symbol function_parameters) [81313 81315])
                            ("zs" variable nil (reparse-symbol function_parameters) [81317 81319])
                            ("zdir" variable nil (reparse-symbol function_parameters) [81323 81327])
                            ("s" variable nil (reparse-symbol function_parameters) [81333 81334])
                            ("c" variable nil (reparse-symbol function_parameters) [81339 81340])
                            ("depthshade" variable nil (reparse-symbol function_parameters) [81347 81357])
                            ("args" variable nil (reparse-symbol function_parameters) [81380 81385])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [81387 81395]))                          )
                        (reparse-symbol indented_block_body) [81291 84088])
                    ("scatter3D" variable nil (reparse-symbol indented_block_body) [84093 84112])
                    ("bar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84126 84130])
                            ("left" variable nil (reparse-symbol function_parameters) [84132 84136])
                            ("height" variable nil (reparse-symbol function_parameters) [84138 84144])
                            ("zs" variable nil (reparse-symbol function_parameters) [84146 84148])
                            ("zdir" variable nil (reparse-symbol function_parameters) [84152 84156])
                            ("args" variable nil (reparse-symbol function_parameters) [84162 84167])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [84169 84177]))                          )
                        (reparse-symbol indented_block_body) [84118 85890])
                    ("bar3d" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85905 85909])
                            ("x" variable nil (reparse-symbol function_parameters) [85911 85912])
                            ("y" variable nil (reparse-symbol function_parameters) [85914 85915])
                            ("z" variable nil (reparse-symbol function_parameters) [85917 85918])
                            ("dx" variable nil (reparse-symbol function_parameters) [85920 85922])
                            ("dy" variable nil (reparse-symbol function_parameters) [85924 85926])
                            ("dz" variable nil (reparse-symbol function_parameters) [85928 85930])
                            ("color" variable nil (reparse-symbol function_parameters) [85932 85937])
                            ("zsort" variable nil (reparse-symbol function_parameters) [85958 85963])
                            ("shade" variable nil (reparse-symbol function_parameters) [85975 85980])
                            ("args" variable nil (reparse-symbol function_parameters) [85987 85992])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [85994 86002]))                          
                        :documentation "Generate a 3D barplot.

        This method creates three dimensional barplot where the width,
        depth, height, and color of the bars can all be uniquely set.

        Parameters
        ----------
        x, y, z : array-like
            The coordinates of the anchor point of the bars.

        dx, dy, dz : scalar or array-like
            The width, depth, and height of the bars, respectively.

        color : sequence of valid color specifications, optional
            The color of the bars can be specified globally or
            individually. This parameter can be:

              - A single color value, to color all bars the same color.
              - An array of colors of length N bars, to color each bar
                independently.
              - An array of colors of length 6, to color the faces of the
                bars similarly.
              - An array of colors of length 6 * N bars, to color each face
                independently.

            When coloring the faces of the boxes specifically, this is
            the order of the coloring:

              1. -Z (bottom of box)
              2. +Z (top of box)
              3. -Y
              4. +Y
              5. -X
              6. +X

        zsort : str, optional
            The z-axis sorting scheme passed onto
            :func:`~mpl_toolkits.mplot3d.art3d.Poly3DCollection`

        shade : bool, optional (default = True)
            When true, this shades the dark sides of the bars (relative
            to the plot's source of light).

        Any additional keyword arguments are passed onto
        :func:`~mpl_toolkits.mplot3d.art3d.Poly3DCollection`

        Returns
        -------
        collection : Poly3DCollection
            A collection of three dimensional polygons representing
            the bars.
        ")
                        (reparse-symbol indented_block_body) [85895 90120])
                    ("set_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90139 90143])
                            ("label" variable nil (reparse-symbol function_parameters) [90145 90150])
                            ("fontdict" variable nil (reparse-symbol function_parameters) [90152 90160])
                            ("loc" variable nil (reparse-symbol function_parameters) [90167 90170])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [90181 90189]))                          )
                        (reparse-symbol indented_block_body) [90125 90422])
                    ("set_title" variable nil (reparse-symbol indented_block_body) [90426 90474])
                    ("quiver" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90491 90495])
                            ("args" variable nil (reparse-symbol function_parameters) [90497 90502])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [90504 90512]))                          
                        :documentation "
        Plot a 3D field of arrows.

        call signatures::

            quiver(X, Y, Z, U, V, W, **kwargs)

        Arguments:

            *X*, *Y*, *Z*:
                The x, y and z coordinates of the arrow locations (default is
                tail of arrow; see *pivot* kwarg)

            *U*, *V*, *W*:
                The x, y and z components of the arrow vectors

        The arguments could be array-like or scalars, so long as they
        they can be broadcast together. The arguments can also be
        masked arrays. If an element in any of argument is masked, then
        that corresponding quiver element will not be plotted.

        Keyword arguments:

            *length*: [1.0 | float]
                The length of each quiver, default to 1.0, the unit is
                the same with the axes

            *arrow_length_ratio*: [0.3 | float]
                The ratio of the arrow head with respect to the quiver,
                default to 0.3

            *pivot*: [ 'tail' | 'middle' | 'tip' ]
                The part of the arrow that is at the grid point; the arrow
                rotates about this point, hence the name *pivot*.
                Default is 'tail'

            *normalize*: [False | True]
                When True, all of the arrows will be the same length. This
                defaults to False, where the arrows will be different lengths
                depending on the values of u,v,w.

        Any additional keyword arguments are delegated to
        :class:`~matplotlib.collections.LineCollection`

        ")
                        (reparse-symbol indented_block_body) [90480 96870])
                    ("quiver3D" variable nil (reparse-symbol indented_block_body) [96875 96892])
                    ("voxels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96909 96913])
                            ("args" variable nil (reparse-symbol function_parameters) [96915 96920])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [96922 96930]))                          
                        :documentation "
        ax.voxels([x, y, z,] /, filled, **kwargs)

        Plot a set of filled voxels

        All voxels are plotted as 1x1x1 cubes on the axis, with filled[0,0,0]
        placed with its lower corner at the origin. Occluded faces are not
        plotted.

        Call signatures::

            voxels(filled, facecolors=fc, edgecolors=ec, **kwargs)
            voxels(x, y, z, filled, facecolors=fc, edgecolors=ec, **kwargs)

        .. versionadded:: 2.1

        Parameters
        ----------
        filled : 3D np.array of bool
            A 3d array of values, with truthy values indicating which voxels
            to fill

        x, y, z : 3D np.array, optional
            The coordinates of the corners of the voxels. This should broadcast
            to a shape one larger in every dimension than the shape of `filled`.
            These can be used to plot non-cubic voxels.

            If not specified, defaults to increasing integers along each axis,
            like those returned by :func:`~numpy.indices`.
            As indicated by the ``/`` in the function signature, these arguments
            can only be passed positionally.

        facecolors, edgecolors : array_like, optional
            The color to draw the faces and edges of the voxels. Can only be
            passed as keyword arguments.
            This parameter can be:

              - A single color value, to color all voxels the same color. This
                can be either a string, or a 1D rgb/rgba array
              - ``None``, the default, to use a single color for the faces, and
                the style default for the edges.
              - A 3D ndarray of color names, with each item the color for the
                corresponding voxel. The size must match the voxels.
              - A 4D ndarray of rgb/rgba data, with the components along the
                last axis.

        **kwargs
            Additional keyword arguments to pass onto
            :func:`~mpl_toolkits.mplot3d.art3d.Poly3DCollection`

        Returns
        -------
        faces : dict
            A dictionary indexed by coordinate, where ``faces[i,j,k]`` is a
            `Poly3DCollection` of the faces drawn for the voxel
            ``filled[i,j,k]``. If no faces were drawn for a given voxel, either
            because it was not asked to be drawn, or it is fully occluded, then
            ``(i,j,k) not in faces``.

        Examples
        --------
        .. plot:: gallery/mplot3d/voxels.py
        .. plot:: gallery/mplot3d/voxels_rgb.py
        .. plot:: gallery/mplot3d/voxels_torus.py
        .. plot:: gallery/mplot3d/voxels_numpy_logo.py
        ")
                        (reparse-symbol indented_block_body) [96898 105004]))                  
                :type "class")
                nil [1231 105004])
            ("get_test_data" function (:arguments 
              ( ("delta" variable nil (reparse-symbol function_parameters) [105024 105029]))              ) nil [105006 105405])
            ("matplotlib.projections" include nil nil [105610 105647])
            ("proj" code nil nil [105648 105689]))          
      :file "axes3d.py"
      :pointmax 105690
      :fsize 105689
      :lastmodtime '(23091 44284 212034 702000)
      :unmatched-syntax '((NAME 65208 . 65215) (IF 65254 . 65256) (ELSE 65264 . 65268) (NAME 65129 . 65136) (IF 65175 . 65177) (ELSE 65185 . 65189) (NAME 64879 . 64886) (IF 64925 . 64927) (ELSE 64935 . 64939) (NAME 64800 . 64807) (IF 64846 . 64848) (ELSE 64856 . 64860) (FROM 1131 . 1135) (PERIOD 1136 . 1137) (FROM 1110 . 1114) (PERIOD 1115 . 1116) (FROM 1090 . 1094) (PERIOD 1095 . 1096)))
    (semanticdb-table "semanticdb-table"
      :file "art3d.py"
      :fsize 24900
      :lastmodtime '(23091 44284 213034 629000))
    (semanticdb-table "semanticdb-table"
      :file "proj3d.py"
      :fsize 4775
      :lastmodtime '(23091 44284 213034 629000))
    (semanticdb-table "semanticdb-table"
      :file "axis3d.py"
      :fsize 18762
      :lastmodtime '(23091 44284 213034 629000)))
  :file "!home!marcus!git!dotfiles!.virtualenvs!venv!lib!python3.5!site-packages!mpl_toolkits!mplot3d!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
